@page "/shoppingcart"

@using CKK.Logic.Models
@using CKK.DB.UOW
@using CKK.DB.Interfaces
@inject NavigationManager NavManager

@if (uow == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="text-center">
    <h1 class="display-4">SHOPPING CART</h1>
    </div>
    <form method="get">
        <input type="hidden" value="@order.OrderId" />
        <br />
        <h4 style="text-align:center;">Here is our selection of boards, use the up and down arrows to select the quantity!</h4>
        <br />
        <div class="row">
            @foreach (var item in uow.Products.GetAll())
            {
                <div class="card" style="width: 18rem; padding: 5px; text-align:center;">
                    <div class="card-body">
                        <h5 class="card-title text-center">@item.Name</h5>
                        @if(item.Name.Contains("Lib Tech Orca"))
                        {
                            <img src="/images/libtechorca.png" width="250px" height="200px" />
                        }
                        @if (item.Name.Contains("Salomon Sleepwalker"))
                        {
                            <img src="/images/salomonsleepwalker.png" width="200px" height="200px" />
                        }
                        @if (item.Name.Contains("CAPiTA Mega Mercury"))
                        {
                            <img src="/images/capitamegamerc.png" width="200px" height="200px" />
                        }
                        @if (item.Name.Contains("K2 Excavator"))
                        {
                            <img src="/images/k2excavator.png" width="200px" height="200px" />
                        }
                        @if (item.Name.Contains("GNU Gremlin"))
                        {
                            <img src="/images/gnugremlin.png" width="200px" height="200px" />
                        }
                        @if (item.Name.Contains("Arbor Candle Rain"))
                        {
                            <img src="/images/arborcandle.png" width="175px" height="200px" />
                        }
                        @if (item.Name.Contains("Lib Tech Dynamo"))
                        {
                            <img src="/images/libtechdynamo.png" width="100px" height="200px" />
                        }
                        @if (item.Name.Contains("GNU YOUNG MONEY"))
                        {
                            <img src="/images/youngmoney.png" width="125px" height="200px" />
                        }
                        @if (item.Name.Contains("GNU LADIES CHOICE"))
                        {
                            <img src="/images/ladieschoice.png" width="125px" height="200px" />
                        }
              
                        <p class="card-text">@item.Price.ToString("c")</p>
                        <p class="card-text">Quantity Available: @item.Quantity</p>
                        <br />
                    </div>
                    <div class="card-footer">
                        <input class="num-spinner" id="spinner-@item.Id" @onchange="@(e => spinnerChange(item.Id, e.Value))" style="padding: 10px; width: 75%;" type="number" value="0" min="0" max="@item.Quantity" step="1" />
                    </div>
                </div>
            }
        </div>
       <br />
        <h3 class="messageshop">Select Check Out when your order is completed</h3>
    </form>
    <br />
    <a id="CheckoutBtn"  @onclick="CheckOut" class="btn btn-primary btn-lg btn-block">@checkoutTotal</a>
}

@code {
    string checkoutTotal = "Check Out - .00";
    private Order order;
    [Inject]
    private IUnitOfWork uow { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        if(uow != null) //Valid uow
        {
            order =  uow.Orders.GetById(1);
            if (order == null) //Make new order when no active orders found
            {
                Order newOrder = new Order() { OrderId = 1, OrderNumber = "1", CustomerId = 1, ShoppingCartId = 100 };
                order = newOrder;
                uow.Orders.Add(newOrder);
            } 
            UpdateTotal();
        }
    }
    protected void CheckOut()
    {
        string statusMessage = "";
        //Get order info
        var inventory = uow.Products.GetAll();

        //Update quantities of products in inventory
        var cartItems = uow.ShoppingCarts.GetProducts(order.ShoppingCartId);
        foreach(var item in cartItems)
        {
            Product prod = inventory.Where(x => x.Id == item.ProductId).FirstOrDefault();
            prod.Quantity -= item.Quantity;
            uow.Products.Update(prod);
        }

        //For the assignment we just delete or clear 
        uow.Orders.Delete(1);
        uow.ShoppingCarts.ClearCart(order.ShoppingCartId);

        statusMessage = "Order Placed Successfully";
        UpdateTotal();
        NavManager.NavigateTo("/checkout");

    }
    private void UpdateTotal()
    {
        var total = uow.ShoppingCarts.GetTotal(order.ShoppingCartId).ToString("c");
        checkoutTotal = "Check Out - "+ total;
    }

    protected void spinnerChange(int productId, object value)
    {
        //Add to Cart
        var Item = uow.ShoppingCarts.AddtoCart(order.ShoppingCartId, productId, Convert.ToInt16(value));
        UpdateTotal();
    }
    }


